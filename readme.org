#+TITLE: color-adjust
#+PROPERTY: header-args    :eval no-export

* color-adjust
:PROPERTIES:
:EXPORT_FILE_NAME: color-adjust
:export_date: 2022-1-16
:END:
** default combo

#+begin_src haskell
cs = [[2,219,240], [2,75,120], [255,181,91], [186,88,0]] :: [Array '[3] Word8]
lum = 0.6
sat0 = 0.2
hue0 = 315
print cs
#+end_src

#+RESULTS:
: > > > [[2, 219, 240],[2, 75, 120],[255, 181, 91],[186, 88, 0]]

#+begin_src haskell :results output html :exports results
putStrLn $ unpack $ showSwatches "" cs
putStrLn $ unpack $ showSwatches "" $ greys <$> cs
putStrLn $ unpack $ showSwatches "" $ chroma lum <$> cs
putStrLn $ unpack $ showSwatches "" $ hues lum sat0 <$> cs
putStrLn $ unpack $ showSwatches "" $ sats lum hue0 <$> cs
#+end_src

#+RESULTS:
#+begin_export html
<div>
<div class=swatch style="background:rgb(2 219 240);">(2 219 240)</div>
<div class=swatch style="background:rgb(2 75 120);">(2 75 120)</div>
<div class=swatch style="background:rgb(255 181 91);">(255 181 91)</div>
<div class=swatch style="background:rgb(186 88 0);">(186 88 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(194 194 194);">(194 194 194)</div>
<div class=swatch style="background:rgb(71 71 71);">(71 71 71)</div>
<div class=swatch style="background:rgb(197 197 197);">(197 197 197)</div>
<div class=swatch style="background:rgb(119 119 119);">(119 119 119)</div>

</div>
<div>
<div class=swatch style="background:rgb(0 150 170);">(0 150 170)</div>
<div class=swatch style="background:rgb(73 134 183);">(73 134 183)</div>
<div class=swatch style="background:rgb(179 110 0);">(179 110 0)</div>
<div class=swatch style="background:rgb(196 97 21);">(196 97 21)</div>

</div>
<div>
<div class=swatch style="background:rgb(0 156 188);">(0 156 188)</div>
<div class=swatch style="background:rgb(0 133 237);">(0 133 237)</div>
<div class=swatch style="background:rgb(201 96 0);">(201 96 0)</div>
<div class=swatch style="background:rgb(215 78 0);">(215 78 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(159 100 185);">(159 100 185)</div>
<div class=swatch style="background:rgb(150 110 169);">(150 110 169)</div>
<div class=swatch style="background:rgb(158 101 183);">(158 101 183)</div>
<div class=swatch style="background:rgb(161 97 188);">(161 97 188)</div>

</div>
#+end_export

#+begin_src haskell :file other/combo.svg :results output graphics file :exports both
writeChartSvg "other/combo.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "dots" (dot' <$> cs) <> named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.01 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 20 0.8 0.3))))
#+end_src

#+RESULTS:
[[file:other/combo.svg]]

** alternative combo

#+begin_src haskell
cs' =  [[180,4,243], [42,17,160], [231,224,0], [212,173,0]] :: [Array '[3] Word8]
lum = 0.7
sat0 = 0.2
hue0 = 0
#+end_src

#+begin_src haskell :results output html :exports results
putStrLn $ unpack $ showSwatches "" cs'
putStrLn $ unpack $ showSwatches "" $ greys <$> cs'
putStrLn $ unpack $ showSwatches "" $ chroma lum <$> cs'
putStrLn $ unpack $ showSwatches "" $ hues lum sat0 <$> cs'
putStrLn $ unpack $ showSwatches "" $ sats lum hue0 <$> cs'
#+end_src

#+RESULTS:
#+begin_export html
<div>
<div class=swatch style="background:rgb(180 4 243);">(180 4 243)</div>
<div class=swatch style="background:rgb(42 17 160);">(42 17 160)</div>
<div class=swatch style="background:rgb(231 224 0);">(231 224 0)</div>
<div class=swatch style="background:rgb(212 173 0);">(212 173 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(123 123 123);">(123 123 123)</div>
<div class=swatch style="background:rgb(58 58 58);">(58 58 58)</div>
<div class=swatch style="background:rgb(216 216 216);">(216 216 216)</div>
<div class=swatch style="background:rgb(177 177 176);">(177 177 176)</div>

</div>
<div>
<div class=swatch style="background:rgb(218 75 255);">(218 75 255)</div>
<div class=swatch style="background:rgb(127 141 255);">(127 141 255)</div>
<div class=swatch style="background:rgb(173 164 0);">(173 164 0)</div>
<div class=swatch style="background:rgb(193 154 0);">(193 154 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(200 114 246);">(200 114 246)</div>
<div class=swatch style="background:rgb(127 141 255);">(127 141 255)</div>
<div class=swatch style="background:rgb(174 164 0);">(174 164 0)</div>
<div class=swatch style="background:rgb(202 151 0);">(202 151 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(255 0 151);">(255 0 151)</div>
<div class=swatch style="background:rgb(253 91 153);">(253 91 153)</div>
<div class=swatch style="background:rgb(248 98 154);">(248 98 154)</div>
<div class=swatch style="background:rgb(234 112 154);">(234 112 154)</div>

</div>
#+end_export

#+begin_src haskell :file other/comboalt.svg :results output graphics file :exports both
writeChartSvg "other/comboalt.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "dots" (dot' <$> cs') <> named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.01 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 20 0.8 0.3))))
#+end_src

#+RESULTS:
[[file:other/comboalt.svg]]

** gradient

#+begin_src haskell :file other/grad1.svg :results output graphics file :exports both
c0 = [2,75,120] :: Array '[3] Word8
c1 = [186,88,0] :: Array '[3] Word8
 writeChartSvg "other/grad1.svg" $ mempty & #svgOptions % #svgHeight .~ 50 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChart 0.1 100 (rgbw2colour c0) (rgbw2colour c1))
#+end_src

#+RESULTS:
[[file:other/grad1.svg]]

** varying lch

#+begin_src haskell :results output
c = [186,88,0] :: Array '[3] Word8
ok = Oklcha' (Oklch' (rgbw2oklch c)) 1
print ok
#+end_src

#+RESULTS:
:
: > Oklcha' {lch = Oklch' {oklchArray = [0.5701403615841459, 0.14852717248942346, 51.02142232578221]}, lcha = 1.0}

fade to white

#+begin_src haskell :file other/towhite.svg :results output graphics file :exports results
light0 = ok & lch' % l' .~ 1
writeChartSvg "other/towhite.svg" $ gradient' 100 6 20 ok light0
#+end_src

#+RESULTS:
[[file:other/toblack.svg]]


fade to grey

#+begin_src haskell :file other/togrey.svg :results output graphics file :exports results
chroma0 = ok & lch' % c' .~ 0
writeChartSvg "other/togrey.svg" $ gradient' 100 6 20 ok chroma0
#+end_src

#+RESULTS:
[[file:other/togrey.svg]]


fade to hue=0

#+begin_src haskell :file other/tohue0.svg :results output graphics file :exports results
c0 = ok & lch' % h' .~ 0
writeChartSvg "other/tohue0.svg" $ gradient' 100 6 20 ok c0
#+end_src

#+RESULTS:
[[file:other/tohue0.svg]]

lightness 0 to 1

#+begin_src haskell :file other/lightness.svg :results output graphics file :exports results
c0 = ok & lch' % l' .~ 0
c1 = ok & lch' % l' .~ 1
lorig = view (lch' % l') ok
writeChartSvg "other/lightness.svg" $ gradientb lorig 100 6 20 c0 c1

#+end_src

#+RESULTS:
[[file:other/lightness.svg]]


chroma 0 to 0.33

#+begin_src haskell :file other/chroma.svg :results output graphics file :exports results
c0 = ok & lch' % c' .~ 0
c1 = ok & lch' % c' .~ 0.33
orig = view (lch' % c') ok
writeChartSvg "other/chroma.svg" $ gradientb orig 100 6 20 c0 c1

#+end_src

#+RESULTS:
[[file:other/chroma.svg]]


hue 0 to 360

#+begin_src haskell :file other/hue.svg :results output graphics file :exports results
c0 = ok & lch' % h' .~ 0
c1 = ok & lch' % h' .~ 360
orig = view (lch' % c') ok
writeChartSvg "other/hue.svg" $ gradientb orig 100 6 20 c0 c1

#+end_src

#+RESULTS:
[[file:other/hue.svg]]

** color wheel

reference: https://observablehq.com/@fil/oklab-color-space

#+begin_src haskell :file other/wheel.svg :results output graphics file :exports both
lum = 0.5
writeChartSvg "other/wheel.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.06 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 100 lum 0.4))))
#+end_src

#+RESULTS:
[[file:other/wheel.svg]]

** oklab

[[file:///Users/tonyday/haskell/color-adjust/other/gradient.html][gradient]]

[[https://bottosson.github.io/posts/oklab/][A perceptual color space for image processing]]

oklab

| Channel | Range            | Description           |
|---------+------------------+-----------------------|
| l       | [0, 0.999]≈      | Lightness             |
| a       | [-0.233, 0.276]≈ | Green–red component   |
| b       | [-0.311, 0.198]≈ | Blue–yellow component |

oklch

| Channel | Range       | Description |
|---------+-------------+-------------|
| l       | [0, 0.999]≈ | Lightness   |
| c       | [0, 0.322]≈ | Chroma      |
| h       | [0, 360)    | Hue         |

** bootup

#+begin_src haskell :results value
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedStrings
:set -XOverloadedLists
:set -XOverloadedLabels
:set -XFlexibleContexts
:set -XGADTs
:set -XDataKinds
import qualified Graphics.Color.Space as S
import Data.Text (Text, pack, unpack)
import Chart
import Data.Colour.Adjust
import Optics.Core
import Graphics.Color.Model as M hiding (one)
import Data.Bifunctor
#+end_src

#+RESULTS:

check

#+BEGIN_SRC haskell :results value :export both
let x = "ok"
putStrLn x
#+END_SRC

#+RESULTS:
: ok

** reference

CSS colors are defined as [[https://en.wikipedia.org/wiki/SRGB][sRGB - Wikipedia]], with D65 illuminate

- [[https://en.wikipedia.org/wiki/Relative_luminance][Relative luminance - Wikipedia]]
- [[https://en.wikipedia.org/wiki/Chromaticity][Chromaticity - Wikipedia]]
- [[https://en.wikipedia.org/wiki/CIE_1931_color_space][CIE 1931 color space - Wikipedia]]
- [[https://en.wikipedia.org/wiki/CIELAB_color_space][CIELAB color space - Wikipedia]]
- [[https://www.w3.org/TR/css-color-5/#colorcontrast][CSS Color Module Level 5]]
- [[https://www.w3.org/TR/css-color-4/#rgb-functions][CSS Color Module Level 4]]

** style

<style>
.swatch {
  border-radius:20%;
  display: inline-block;
  margin:10px;
  width: 20px;
  height: 20px;
  overflow: hidden;
  font-size: 0px;
}
.swatch:hover {
  margin: 0;
  width: 40px;
  height: 40px;
  line-height: 40px;
  font-size: 6px;
  color: rgb(12 12 12);
  text-align: center;
  overflow: hidden;
}
</style>

