#+TITLE: color-adjust
#+PROPERTY: header-args    :eval no-export

* Color Experiments
:PROPERTIES:
:EXPORT_FILE_NAME: color-adjust
:CUSTOM_ID: colorexperimentsid
:export_date: 2022-2-9
:END:

This is a snapshot of some ongoing colour R&D, mostly for the [[https://hackage.haskell.org/package/chart-svg][chart-svg]] library. The development repo can be found at [[https://github.com/tonyday567/color-adjust][GitHub - tonyday567/color-adjust]]. The readme.org there is runnable and contains the code used to create the examples below.

** Haskell setup :noexport:

#+begin_src haskell
:r
:set prompt "> "
:set -XOverloadedStrings
:set -XOverloadedLabels
:set -Wno-name-shadowing
:set -XTupleSections
:set -Wno-type-defaults
import Data.Word
import qualified Data.Text as Text
import Data.Bifunctor
import Chart
import Data.Colour.Adjust
import Optics.Core
cs = palette1 <$> [0..3] :: [Colour]
lchs = review lcha2colour' <$> cs :: [LCHA]
#+end_src

#+RESULTS:
: Loaded GHCi configuration from /Users/tonyday/haskell/color-adjust/.ghci
: [1 of 1] Compiling Data.Colour.Adjust ( src/Data/Colour/Adjust.hs, interpreted )
: Ok, one module loaded.
: ||Ok, one module loaded.
: |

** oklch

A new color space model, [[https://bottosson.github.io/posts/oklab/][oklab]], has been introduced to the [[https://www.w3.org/TR/css-color-4/#rgb-functions][CSS standards]].

The basic idea is that this color space is /ok/ with respect to human perception of graduated changes in colour. The LCH version of oklab consists of three element:

- [[https://en.wikipedia.org/wiki/Lightness][lightness]], from 0 (black) to 1 (white)
- [[https://en.wikipedia.org/wiki/Chromaticity][chromacity]], from 0 (grey) to a point at which the colour goes out of RGB gamut (it varies but typically 0.25 to 0.33)
- [[https://en.wikipedia.org/wiki/Hue][hue]], from 0 to 360, representing colour as a rainbow circle in degrees.

** LCHA

Adding in an [[https://en.wikipedia.org/wiki/Alpha_compositing][alpha]] channel, which is a graduated model of colour opacity, we create a 4 element type, LCHA:

| Channel | Range       | Description |
|---------+-------------+-------------|
| l       | [0, 1]      | Lightness   |
| c       | [0, 0.322]â‰ˆ | Chroma      |
| h       | [0, 360)    | Hue         |
| a       | [0, 1]      | Alpha       |


We take some colours from the chart-svg palette and convert them to LCHA:

#+begin_src haskell :results output :exports results
cs = palette1 <$> [0..3] :: [Colour]
print cs
#+end_src

#+RESULTS:
: [Colour 0.02 0.73 0.80 1.00,Colour 0.02 0.29 0.48 1.00,Colour 0.66 0.07 0.55 1.00,Colour 0.96 0.60 0.92 1.00]

#+begin_src haskell :exports results
lchs = review lcha2colour' <$> cs :: [LCHA]
import Data.FormatN
import qualified Data.Text.IO as Text
prettyLCHA = (\(LCHA l c h a) -> ("LCHA " <> fixed (Just 3) l <> " " <> fixed (Just 3) c <> " " <> fixed (Just 0) h <> " " <> fixed (Just 3) a))
sequence_ $ Text.putStrLn . prettyLCHA <$> lchs
#+end_src

#+RESULTS:
: LCHA 0.720 0.123 207 1.000
: LCHA 0.400 0.100 246 1.000
: LCHA 0.500 0.210 338 1.000
: LCHA 0.800 0.150 331 1.000

** Decomposition

The swatches below decompose these colours into LCH components, by setting each component to constant values:

#+begin_src haskell :results output html :exports results
pSwatch suff f xs = putStrLn $ Text.unpack $ showSwatches "" suff ((("",) . f) <$> xs)
pSwatch "original" id cs
pSwatch "zero chroma" greyed cs
pSwatch "constant lightness" (over lightness' (const 0.5)) cs
pSwatch "constant lightness & chroma" (over lightness' (const 0.5) . over chroma' 0.15) cs
pSwatch "constant lightness and hue" (over lightness' (const 0.5) . over hue' 180) cs
#+end_src

#+RESULTS:
#+begin_export html
<div>

<div class=swatch style="background:rgba(2%, 73%, 80%, 1.00);"></div>
<div class=swatch style="background:rgba(2%, 29%, 48%, 1.00);"></div>
<div class=swatch style="background:rgba(66%, 7%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(96%, 60%, 92%, 1.00);"></div>
original
</div>
<div>

<div class=swatch style="background:rgba(64%, 64%, 64%, 1.00);"></div>
<div class=swatch style="background:rgba(28%, 28%, 28%, 1.00);"></div>
<div class=swatch style="background:rgba(39%, 39%, 39%, 1.00);"></div>
<div class=swatch style="background:rgba(74%, 74%, 74%, 1.00);"></div>
zero chroma
</div>
<div>

<div class=swatch style="background:rgba(-63%, 46%, 53%, 1.00);"></div>
<div class=swatch style="background:rgba(17%, 41%, 60%, 1.00);"></div>
<div class=swatch style="background:rgba(66%, 7%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(57%, 24%, 54%, 1.00);"></div>
constant lightness
</div>
<div>

<div class=swatch style="background:rgba(-110%, 47%, 56%, 1.00);"></div>
<div class=swatch style="background:rgba(-21%, 40%, 70%, 1.00);"></div>
<div class=swatch style="background:rgba(59%, 23%, 50%, 1.00);"></div>
<div class=swatch style="background:rgba(57%, 24%, 54%, 1.00);"></div>
constant lightness & chroma
</div>
<div>

<div class=swatch style="background:rgba(-53%, 47%, 40%, 1.00);"></div>
<div class=swatch style="background:rgba(-15%, 46%, 40%, 1.00);"></div>
<div class=swatch style="background:rgba(-190%, 52%, 41%, 1.00);"></div>
<div class=swatch style="background:rgba(-96%, 49%, 40%, 1.00);"></div>
constant lightness and hue
</div>
#+end_export

** Mapping LCHA

The chart below plots these 4 colours versus a 2-D slice of the oklab space (a 3-D one) with constant lightness.

#+begin_src haskell :file other/dotwheel.svg :results output graphics file :exports results
writeChartOptions "other/dotwheel.svg" (dotMap 0.01 50 0.6 0.7 cs)
#+end_src

#+RESULTS:
[[file:other/dotwheel.svg]]



Note that the light blue color (LCHA 0.720 0.123 207 1.000) is well outside the [[https://en.wikipedia.org/wiki/Gamut][gamut]] for the wheel lightness chosen. This is a common occurence and the shape of the chroma range varies considerably with both hue and lightness.

#+begin_src haskell :exports both
view lcha2colour' (LCHA 0.6 0.123 207 1.000)
#+end_src

#+RESULTS:
: Colour -0.50 0.58 0.65 1.00

Clipping this result to 0 results in significant hue shift.

Compare the shape of gamuts for lightnesses of 0.3 and 0.7

*** lightness=0.3

#+begin_src haskell :file other/wheel3.svg :results output graphics file :exports results
writeChartOptions "other/wheel3.svg" (wheel 0.05 200 0.3 0.6)
#+end_src

#+RESULTS:
[[file:other/wheel3.svg]]

*** lightness=0.7

#+begin_src haskell :file other/wheel7.svg :results output graphics file :exports results
writeChartOptions "other/wheel7.svg" (wheel 0.05 200 0.7 0.6)
#+end_src

#+RESULTS:
[[file:other/wheel7.svg]]

** Gradient Charts

Mixing of colours resulting in the interpolated colour being out of gamut is the major drawwback of the oklch space. Otherwise, the mixing of colours is quite pleasing from this human's perspective:

#+begin_src haskell :results output :exports both
c = Colour 0.72 0.34 0.04 1
ok = view (re lcha2colour') c
print c
#+end_src

#+RESULTS:
: Colour 0.72 0.34 0.04 1.00

fade to white (LCH 0 0 50 1)

#+begin_src haskell :file other/towhite.svg :results output graphics file :exports results
writeChartOptions "other/towhite.svg" $ gradient Nothing 100 6 100 ok (set (lch' % lLCH') 1 ok)
#+end_src

#+RESULTS:
[[file:other/towhite.svg]]


fade to grey (LCH 0.566 0 50 1)

#+begin_src haskell :file other/togrey.svg :results output graphics file :exports results
writeChartOptions "other/togrey.svg" $ gradient Nothing 100 6 100 ok (set (lch' % c') 0 ok)
#+end_src

#+RESULTS:
[[file:other/togrey.svg]]


fade to hue=0 (LCH 0.566 0.146 0 1)

#+begin_src haskell :file other/tohue0.svg :results output graphics file :exports results
writeChartOptions "other/tohue0.svg" $ gradient Nothing 100 6 100 ok (set (lch' % hLCH') 0 ok)
#+end_src

#+RESULTS:
[[file:other/tohue0.svg]]

lightness 0 to 1

#+begin_src haskell :file other/lightness.svg :results output graphics file :exports results
c0 = ok & lch' % lLCH' .~ 0
c1 = ok & lch' % lLCH' .~ 1
lorig = view (lch' % lLCH') ok
writeChartOptions "other/lightness.svg" $ gradient (Just lorig) 100 6 100 c0 c1
#+end_src

#+RESULTS:
[[file:other/lightness.svg]]


The red drift is due to being out of gamut.

chroma 0 to 0.25

#+begin_src haskell :file other/chroma.svg :results output graphics file :exports results
c0 = ok & lch' % cLCH' .~ 0
c1 = ok & lch' % cLCH' .~ 0.25
corig = view (lch' % cLCH') ok
writeChartOptions "other/chroma.svg" $ gradient (Just (corig / 0.25)) 100 6 100 c0 c1
#+end_src

#+RESULTS:
[[file:other/chroma.svg]]


hue 0 to 360

#+begin_src haskell :file other/hue.svg :results output graphics file :exports results
c0 = ok & lch' % hLCH' .~ 0
c1 = ok & lch' % hLCH' .~ 360
horig = view (lch' % hLCH') ok
writeChartOptions "other/hue.svg" $ gradient (Just (horig/360.0)) 100 6 100 c0 c1

#+end_src

#+RESULTS:
[[file:other/hue.svg]]

Whatever the relative success of oklab in providing pleasing human perceptions of consistent colour change, inclusion in the CSS standards are likely to provide a leg up to its usage going forward.

#+begin_src haskell :file other/banner.svg :results output graphics file :exports results
writeChartOptions "other/banner.svg" $ gradient (Just (horig/360.0)) 100 6 100 (c0 & lch' % lLCH' .~ 0.2 ) (c1 & lch' % lLCH' .~ 0.3 ) & #charts %~ (<> named "text" [(TextChart (defaultTextStyle & #color .~ light & #size .~ 0.1) [("chart-svg", Point 0.4 0.25)])])
#+end_src

#+RESULTS:
[[file:other/banner.svg]]


** palette1 Testing

Full palette1 mapping for chart-svg.

#+begin_src haskell
x1 =[LCHA 0.72 0.123 207 1, LCHA 0.40 0.10 246 1, LCHA 0.50 0.21 338 1, LCHA 0.8 0.15 331 1, LCHA 0.83 0.14 69 1, LCHA 0.57 0.15 50 1, LCHA 0.38 0.085 128 1, LCHA 0.60 0.08 104 1] :: [LCHA]
cs = trimColour <$> view lcha2colour' <$> x1
csu = view lcha2colour' <$> x1
print csu
#+end_src

#+RESULTS:
| Colour | 0.02 | 0.73 | 0.8 | 1.0 | Colour | 0.02 | 0.29 | 0.48 | 1.0 | Colour | 0.66 | 0.07 | 0.55 | 1.0 | Colour | 0.96 | 0.6 | 0.92 | 1.0 | Colour | 1.01 | 0.71 | 0.35 | 1.0 | Colour | 0.73 | 0.34 | 0.01 | 1.0 | Colour | 0.21 | 0.29 | 0.07 | 1.0 | Colour | 0.53 | 0.51 | 0.28 | 1.0 |


#+begin_src haskell :results output html :exports results
pSwatch suff f xs = putStrLn $ Text.unpack $ showSwatches "" suff ((("",) . f) <$> xs)
pSwatch "original" id cs
pSwatch "greyed" greyed cs
pSwatch "lightness 0.5" (over lightness' (const 0.5)) cs
pSwatch "l=0.5, chroma=0.15" (over lightness' (const 0.5) . over chroma' 0.15) cs
pSwatch "l=0.75, hue=20" (over lightness' (const 0.75) . over hue' 20) cs
#+end_src

#+RESULTS:
#+begin_export html
<div>

<div class=swatch style="background:rgba(2%, 73%, 80%, 1.00);"></div>
<div class=swatch style="background:rgba(2%, 29%, 48%, 1.00);"></div>
<div class=swatch style="background:rgba(66%, 7%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(96%, 60%, 92%, 1.00);"></div>
<div class=swatch style="background:rgba(100%, 71%, 35%, 1.00);"></div>
<div class=swatch style="background:rgba(73%, 34%, 1%, 1.00);"></div>
<div class=swatch style="background:rgba(21%, 29%, 7%, 1.00);"></div>
<div class=swatch style="background:rgba(53%, 51%, 28%, 1.00);"></div>
original
</div>
<div>

<div class=swatch style="background:rgba(64%, 64%, 64%, 1.00);"></div>
<div class=swatch style="background:rgba(28%, 28%, 28%, 1.00);"></div>
<div class=swatch style="background:rgba(39%, 39%, 39%, 1.00);"></div>
<div class=swatch style="background:rgba(74%, 74%, 74%, 1.00);"></div>
<div class=swatch style="background:rgba(78%, 78%, 78%, 1.00);"></div>
<div class=swatch style="background:rgba(47%, 47%, 47%, 1.00);"></div>
<div class=swatch style="background:rgba(26%, 26%, 26%, 1.00);"></div>
<div class=swatch style="background:rgba(50%, 50%, 50%, 1.00);"></div>
greyed
</div>
<div>

<div class=swatch style="background:rgba(-63%, 46%, 53%, 1.00);"></div>
<div class=swatch style="background:rgba(17%, 41%, 60%, 1.00);"></div>
<div class=swatch style="background:rgba(66%, 7%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(57%, 24%, 54%, 1.00);"></div>
<div class=swatch style="background:rgba(58%, 32%, -28%, 1.00);"></div>
<div class=swatch style="background:rgba(64%, 26%, -14%, 1.00);"></div>
<div class=swatch style="background:rgba(33%, 42%, 21%, 1.00);"></div>
<div class=swatch style="background:rgba(42%, 40%, 17%, 1.00);"></div>
lightness 0.5
</div>
<div>

<div class=swatch style="background:rgba(-110%, 47%, 56%, 1.00);"></div>
<div class=swatch style="background:rgba(-21%, 40%, 70%, 1.00);"></div>
<div class=swatch style="background:rgba(59%, 23%, 50%, 1.00);"></div>
<div class=swatch style="background:rgba(57%, 24%, 54%, 1.00);"></div>
<div class=swatch style="background:rgba(59%, 31%, -37%, 1.00);"></div>
<div class=swatch style="background:rgba(64%, 26%, -14%, 1.00);"></div>
<div class=swatch style="background:rgba(29%, 45%, -17%, 1.00);"></div>
<div class=swatch style="background:rgba(45%, 40%, -42%, 1.00);"></div>
l=0.5, chroma=0.15
</div>
<div>

<div class=swatch style="background:rgba(95%, 55%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(90%, 58%, 58%, 1.00);"></div>
<div class=swatch style="background:rgba(110%, 41%, 46%, 1.00);"></div>
<div class=swatch style="background:rgba(100%, 52%, 53%, 1.00);"></div>
<div class=swatch style="background:rgba(98%, 53%, 54%, 1.00);"></div>
<div class=swatch style="background:rgba(100%, 52%, 53%, 1.00);"></div>
<div class=swatch style="background:rgba(87%, 60%, 59%, 1.00);"></div>
<div class=swatch style="background:rgba(86%, 60%, 60%, 1.00);"></div>
l=0.75, hue=20
</div>
#+end_export

#+begin_src haskell :file other/palette1.svg :results output graphics file :exports results
writeChartOptions "other/palette1.svg" (dotMap 0.01 50 0.7 0.5 cs & over #hudOptions (colourHudOptions (rgb dark)) & over (#hudOptions % #frames) (fmap (second (set #buffer 0.0))))
#+end_src

#+RESULTS:
[[file:other/palette1.svg]]

*** Line chart

#+begin_src haskell :file other/scratch.svg :results output graphics file :exports results
writeChartOptions "other/scratch.svg" $ let ch = zipWith (\s l -> LineChart (defaultLineStyle & #size .~ 0.015 & #color .~ s) [l]) cs (fmap (uncurry Point) <$> [ [(0.0, 0.0), (2.8, 3.0)], [(0.5, 4.0), (0.5, 0)], [(0.0, 1.0), (1.0, 1.0), (2.0, 5.0)], [(2.5,1), (0.75,2.5)], [(2.5,2.5), (0.75,4.5)], [(2.5,3.5), (0.75,0.5)], [(0.5,0.5), (1.5,4.0)], [(0.15,1.5), (0.75,3.5)]]) in (mempty & #hudOptions .~ (defaultHudOptions & over #frames (<> [(20, defaultFrameOptions & #buffer .~ 0.04)]) & #titles .~ [ (6, defaultTitle "Palette1 Check" & #style % #size .~ 0.1 ), (8, defaultTitle "Made with love and chart-svg" & #style % #size .~ 0.06 & #place .~ PlaceBottom & #anchor .~ AnchorEnd)] & #legends .~ [ (12, defaultLegendOptions & #textStyle % #size .~ 0.20 & over #frame (fmap (set #color transparent)) & #place .~ PlaceAbsolute (Point 0.7 (-0.3)) & #content .~ zip (Text.pack . ("pallete1 "<>). show <$> [0..7]) ch)]) & #charts .~ named "line" ch :: ChartOptions)
#+end_src

#+RESULTS:
[[file:other/scratch.svg]]

** LCH printout :noexport:

#+begin_src haskell :results output :exports both
import Data.FormatN
import qualified Data.Text.IO as Text
sequence_ $ Text.putStrLn . prettyLCHA <$> x1
#+end_src

#+RESULTS:
: LCHA 0.720 0.123 207 1.000
: LCHA 0.400 0.100 246 1.000
: LCHA 0.500 0.210 338 1.000
: LCHA 0.800 0.150 331 1.000
: LCHA 0.830 0.140 69 1.000
: LCHA 0.570 0.150 50 1.000
: LCHA 0.380 0.085 128 1.000
: LCHA 0.600 0.080 104 1.000

** paletteR Testing

~paletteR~ provides random colours, without being too dark or light to use in a chart.

#+begin_src haskell :export none
cs = (\x -> paletteR !! x) <$> ([0..7] :: [Int])
print cs
#+end_src

#+RESULTS:
| Colour | 0.78 | 0.53 | 0.85 | 1.0 | Colour | 0.22 | 0.71 | 0.25 | 1.0 | Colour | 0.0 | 0.5 | 0.57 | 1.0 | Colour | 0.2 | 0.27 | 0.0 | 1.0 | Colour | 0.65 | 0.63 | 0.4 | 1.0 | Colour | 0.15 | 0.34 | 0.27 | 1.0 | Colour | 0.68 | 0.4 | 0.61 | 1.0 | Colour | 0.39 | 0.16 | 0.37 | 1.0 |


#+begin_src haskell :file other/paletter.svg :results output graphics file :exports results
writeChartOptions "other/paletter.svg" (dotMap 0.01 50 0.7 0.5 cs & over #hudOptions (colourHudOptions (rgb dark)) & over (#hudOptions % #frames) (fmap (second (set #buffer 0.0))))
#+end_src

#+RESULTS:
[[file:other/paletter.svg]]


#+begin_src haskell :file other/liner.svg :results output graphics file :exports results
writeChartOptions "other/liner.svg" $ let ch = zipWith (\s l -> LineChart (defaultLineStyle & #size .~ 0.015 & #color .~ s) [l]) cs (fmap (uncurry Point) <$> [ [(0.0, 0.0), (2.8, 3.0)], [(0.5, 4.0), (0.5, 0)], [(0.0, 1.0), (1.0, 1.0), (2.0, 5.0)], [(2.5,1), (0.75,2.5)], [(2.5,2.5), (0.75,4.5)], [(2.5,3.5), (0.75,0.5)], [(0.5,0.5), (1.5,4.0)], [(0.15,1.5), (0.75,3.5)]]) in (mempty & #hudOptions .~ (defaultHudOptions & over #frames (<> [(20, defaultFrameOptions & #buffer .~ 0.04)]) & #titles .~ [ (6, defaultTitle "paletter check" & #style % #size .~ 0.1 ), (8, defaultTitle "Made with love and chart-svg" & #style % #size .~ 0.06 & #place .~ PlaceBottom & #anchor .~ AnchorEnd)] & #legends .~ [ (12, defaultLegendOptions & #textStyle % #size .~ 0.20 & over #frame (fmap (set #color transparent)) & #place .~ PlaceAbsolute (Point 0.7 (-0.3)) & #content .~ zip (Text.pack . ("pallete1 "<>). show <$> [0..7]) ch)]) & #charts .~ named "line" ch :: ChartOptions)
#+end_src

#+RESULTS:
[[file:other/liner.svg]]

** References

- CSS colors are defined as [[https://en.wikipedia.org/wiki/SRGB][sRGB - Wikipedia]], with D65 illuminate.
- [[https://bottosson.github.io/posts/oklab/][A perceptual color space for image processing]]
- [[https://www.w3.org/TR/css-color-5/#colorcontrast][CSS Color Module Level 5]]
- [[https://www.w3.org/TR/css-color-4/#rgb-functions][CSS Color Module Level 4]]
- [[https://www.w3.org/TR/css-color-3/][CSS Color Module Level 3]]
- [[https://en.wikipedia.org/wiki/CIELAB_color_space][CIELAB color space - Wikipedia]]
- https://observablehq.com/@fil/oklab-color-space

<style>
.swatch {
  border-radius:20%;
  display: inline-block;
  margin:10px;
  width: 20px;
  height: 20px;
  overflow: hidden;
  font-size: 0px;
}
.swatch:hover {
  margin: 0;
  width: 40px;
  height: 40px;
  line-height: 40px;
  font-size: 6px;
  color: rgb(12 12 12);
  text-align: center;
  overflow: hidden;
}
</style>



