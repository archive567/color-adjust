#+TITLE: color-adjust
#+PROPERTY: header-args    :eval no-export

* color-adjust
:PROPERTIES:
:EXPORT_FILE_NAME: color-adjust
:export_date: 2022-1-16
:END:

** setup

#+begin_src haskell
:r
:set prompt "> "
:set -XOverloadedLists
:set -XOverloadedStrings
:set -XOverloadedLabels
:set -Wno-name-shadowing
:set -XTupleSections
:set -Wno-type-defaults
import Data.Word
import qualified Data.Text as Text
cws = [[2,219,240], [2,75,120], [255,181,91], [186,88,0]] :: [RGB3 Word8]
cs = view rgb32colour' . (,1) . review rgbd' <$> cws
print cs
#+end_src

#+RESULTS:
: > > > > > > > > > > > [Colour 0.01 0.86 0.94 1.00,Colour 0.01 0.29 0.47 1.00,Colour 1.00 0.71 0.36 1.00,Colour 0.73 0.34 0.00 1.00]

** decomposing colors

#+begin_src haskell :results output html :exports both
pSwatch suff f xs = putStrLn $ Text.unpack $ showSwatches "" suff ((("",) . f) <$> xs)
pSwatch "original" id cs
pSwatch "greyed" greyed cs
pSwatch "lightness 0.5" (over lightness' (const 0.5)) cs
pSwatch "l=0.5, chroma=0.15" (over lightness' (const 0.5) . over chroma' 0.15) cs
pSwatch "l=0.75, hue=20" (over lightness' (const 0.75) . over hue' 20) cs
#+end_src

#+RESULTS:
#+begin_export html

<div>

<div class=swatch style="background:rgba(1%, 86%, 94%, 1.00);"></div>
<div class=swatch style="background:rgba(1%, 29%, 47%, 1.00);"></div>
<div class=swatch style="background:rgba(100%, 71%, 36%, 1.00);"></div>
<div class=swatch style="background:rgba(73%, 34%, 0%, 1.00);"></div>
original
</div>
<div>

<div class=swatch style="background:rgba(76%, 76%, 76%, 1.00);"></div>
<div class=swatch style="background:rgba(28%, 28%, 28%, 1.00);"></div>
<div class=swatch style="background:rgba(77%, 77%, 77%, 1.00);"></div>
<div class=swatch style="background:rgba(47%, 47%, 47%, 1.00);"></div>
greyed
</div>
<div>

<div class=swatch style="background:rgba(-89%, 47%, 55%, 1.00);"></div>
<div class=swatch style="background:rgba(17%, 41%, 59%, 1.00);"></div>
<div class=swatch style="background:rgba(58%, 32%, -25%, 1.00);"></div>
<div class=swatch style="background:rgba(63%, 26%, -15%, 1.00);"></div>
lightness 0.5
</div>
<div>

<div class=swatch style="background:rgba(-105%, 47%, 56%, 1.00);"></div>
<div class=swatch style="background:rgba(-26%, 41%, 70%, 1.00);"></div>
<div class=swatch style="background:rgba(59%, 30%, -36%, 1.00);"></div>
<div class=swatch style="background:rgba(64%, 26%, -16%, 1.00);"></div>
l=0.5, chroma=0.15
</div>
<div>

<div class=swatch style="background:rgba(98%, 53%, 54%, 1.00);"></div>
<div class=swatch style="background:rgba(90%, 58%, 58%, 1.00);"></div>
<div class=swatch style="background:rgba(97%, 54%, 54%, 1.00);"></div>
<div class=swatch style="background:rgba(100%, 52%, 53%, 1.00);"></div>
l=0.75, hue=20
</div>
#+end_export


#+begin_src haskell :file other/combo.svg :results output graphics file :exports both
writeChartSvg "other/combo.svg" (dotMap 0.01 50 0.3 0.5 cs)
#+end_src

#+RESULTS:
[[file:other/combo.svg]]
** alternative decomposing colors

#+begin_src haskell
cws' =  [[180,4,243], [42,17,160], [231,224,0], [212,173,0]] :: [RGB3 Word8]
cs' = view rgb32colour' . (,1) . review rgbd' <$> cws'
#+end_src



#+begin_src haskell :results output html :exports both
pSwatch suff f xs = putStrLn $ Text.unpack $ showSwatches "" suff ((("",) . f) <$> xs)
pSwatch "original" id cs'
pSwatch "greyed" greyed cs'
pSwatch "lightness 0.5" (over lightness' (const 0.5)) cs'
pSwatch "l=0.5, chroma=0.15" (over lightness' (const 0.5) . over chroma' 0.15) cs'
pSwatch "l=0.75, hue=20" (over lightness' (const 0.75) . over hue' 20) cs'
#+end_src

#+RESULTS:
#+begin_export html

<div>

<div class=swatch style="background:rgba(70%, 2%, 95%, 1.00);"></div>
<div class=swatch style="background:rgba(16%, 7%, 62%, 1.00);"></div>
<div class=swatch style="background:rgba(90%, 88%, 0%, 1.00);"></div>
<div class=swatch style="background:rgba(83%, 68%, 0%, 1.00);"></div>
original
</div>
<div>

<div class=swatch style="background:rgba(48%, 48%, 48%, 1.00);"></div>
<div class=swatch style="background:rgba(23%, 23%, 23%, 1.00);"></div>
<div class=swatch style="background:rgba(85%, 85%, 85%, 1.00);"></div>
<div class=swatch style="background:rgba(69%, 69%, 69%, 1.00);"></div>
greyed
</div>
<div>

<div class=swatch style="background:rgba(60%, -35%, 83%, 1.00);"></div>
<div class=swatch style="background:rgba(29%, 30%, 83%, 1.00);"></div>
<div class=swatch style="background:rgba(44%, 40%, -66%, 1.00);"></div>
<div class=swatch style="background:rgba(51%, 37%, -48%, 1.00);"></div>
lightness 0.5
</div>
<div>

<div class=swatch style="background:rgba(50%, 27%, 63%, 1.00);"></div>
<div class=swatch style="background:rgba(31%, 34%, 72%, 1.00);"></div>
<div class=swatch style="background:rgba(43%, 40%, -40%, 1.00);"></div>
<div class=swatch style="background:rgba(51%, 37%, -45%, 1.00);"></div>
l=0.5, chroma=0.15
</div>
<div>

<div class=swatch style="background:rgba(123%, 14%, 36%, 1.00);"></div>
<div class=swatch style="background:rgba(109%, 43%, 47%, 1.00);"></div>
<div class=swatch style="background:rgba(107%, 45%, 48%, 1.00);"></div>
<div class=swatch style="background:rgba(101%, 51%, 52%, 1.00);"></div>
l=0.75, hue=20
</div>
#+end_export


#+begin_src haskell :file other/comboalt.svg :results output graphics file :exports both
writeChartSvg "other/comboalt.svg" $ dotMap 0.01 20 0.8 0.4 cs
#+end_src

#+RESULTS:
[[file:other/comboalt.svg]]
** gradient charts

#+begin_src haskell :results output
c = [186,88,0] :: RGB3 Word8
ok = view (re lcha2colour') $ view rgb32colour' . (,1) . review rgbd'$ c
print ok
#+end_src

#+RESULTS:
:
: > LCHA' {_lch = LCH' {lchArray = [0.5701403615841459, 0.14852717248942346, 51.02142232578221]}, _alpha = 1.0}

fade to white

#+begin_src haskell :file other/towhite.svg :results output graphics file :exports results
writeChartSvg "other/towhite.svg" $ gradient Nothing 100 6 100 ok (set (lch' % l') 1 ok)
#+end_src

#+RESULTS:
[[file:other/towhite.svg]]


fade to grey

#+begin_src haskell :file other/togrey.svg :results output graphics file :exports results
writeChartSvg "other/togrey.svg" $ gradient Nothing 100 6 100 ok (set (lch' % c') 0 ok)
#+end_src

#+RESULTS:
[[file:other/togrey.svg]]


fade to hue=0

#+begin_src haskell :file other/tohue0.svg :results output graphics file :exports results
writeChartSvg "other/tohue0.svg" $ gradient Nothing 100 6 100 ok (set (lch' % h') 0 ok)
#+end_src

#+RESULTS:
[[file:other/tohue0.svg]]

lightness 0 to 1

#+begin_src haskell :file other/lightness.svg :results output graphics file :exports results
c0 = ok & lch' % l' .~ 0
c1 = ok & lch' % l' .~ 1
lorig = view (lch' % l') ok
writeChartSvg "other/lightness.svg" $ gradient (Just lorig) 100 6 100 c0 c1
#+end_src

#+RESULTS:
[[file:other/lightness.svg]]


chroma 0 to 0.33

#+begin_src haskell :file other/chroma.svg :results output graphics file :exports results
c0 = ok & lch' % c' .~ 0
c1 = ok & lch' % c' .~ 0.33
orig = view (lch' % c') ok
writeChartSvg "other/chroma.svg" $ gradient (Just orig) 100 6 100 c0 c1

#+end_src

#+RESULTS:
[[file:other/chroma.svg]]


hue 0 to 360

#+begin_src haskell :file other/hue.svg :results output graphics file :exports results
c0 = ok & lch' % h' .~ 0
c1 = ok & lch' % h' .~ 360
orig = view (lch' % c') ok
writeChartSvg "other/hue.svg" $ gradient (Just orig) 100 6 100 c0 c1

#+end_src

#+RESULTS:
[[file:other/hue.svg]]

** color wheel

reference: https://observablehq.com/@fil/oklab-color-space

#+begin_src haskell :file other/wheel.svg :results output graphics file :exports both
writeChartSvg "other/wheel.svg" (wheel 0.05 200 0.3 0.6)
#+end_src

#+RESULTS:
[[file:other/wheel.svg]]

** reference

CSS colors are defined as [[https://en.wikipedia.org/wiki/SRGB][sRGB - Wikipedia]], with D65 illuminate

- [[https://bottosson.github.io/posts/oklab/][A perceptual color space for image processing]]
- [[https://www.w3.org/TR/css-color-5/#colorcontrast][CSS Color Module Level 5]]
- [[https://www.w3.org/TR/css-color-4/#rgb-functions][CSS Color Module Level 4]]
- [[https://www.w3.org/TR/css-color-3/][CSS Color Module Level 3]]
- [[https://en.wikipedia.org/wiki/CIELAB_color_space][CIELAB color space - Wikipedia]]

*** oklab

[[file:///Users/tonyday/haskell/color-adjust/other/gradient.html][gradient]]

oklab

| Channel | Range            | Description           |
|---------+------------------+-----------------------|
| l       | [0, 0.999]≈      | Lightness             |
| a       | [-0.233, 0.276]≈ | Green–red component   |
| b       | [-0.311, 0.198]≈ | Blue–yellow component |

oklch

| Channel | Range       | Description |
|---------+-------------+-------------|
| l       | [0, 0.999]≈ | Lightness   |
| c       | [0, 0.322]≈ | Chroma      |
| h       | [0, 360)    | Hue         |
** css style

<style>
.swatch {
  border-radius:20%;
  display: inline-block;
  margin:10px;
  width: 20px;
  height: 20px;
  overflow: hidden;
  font-size: 0px;
}
.swatch:hover {
  margin: 0;
  width: 40px;
  height: 40px;
  line-height: 40px;
  font-size: 6px;
  color: rgb(12 12 12);
  text-align: center;
  overflow: hidden;
}
</style>

