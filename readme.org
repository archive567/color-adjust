#+TITLE: color-adjust
#+PROPERTY: header-args    :eval no-export

* color-adjust

** default combo

#+begin_src haskell
cs = [[2,219,240], [2,75,120], [255,181,91], [186,88,0]] :: [Array '[3] Word8]
lum = 0.6
sat0 = 0.2
hue0 = 315
print cs
#+end_src

#+RESULTS:
: > > > [[2, 219, 240],[2, 75, 120],[255, 181, 91],[186, 88, 0]]

#+begin_src haskell :results output html :exports results
putStrLn $ unpack $ showSwatches "" cs
putStrLn $ unpack $ showSwatches "" $ greys <$> cs
putStrLn $ unpack $ showSwatches "" $ chroma lum <$> cs
putStrLn $ unpack $ showSwatches "" $ hues lum sat0 <$> cs
putStrLn $ unpack $ showSwatches "" $ sats lum hue0 <$> cs
#+end_src

#+RESULTS:
#+begin_export html
<div>
<div class=swatch style="background:rgb(2 219 240);">(2 219 240)</div>
<div class=swatch style="background:rgb(2 75 120);">(2 75 120)</div>
<div class=swatch style="background:rgb(255 181 91);">(255 181 91)</div>
<div class=swatch style="background:rgb(186 88 0);">(186 88 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(194 194 194);">(194 194 194)</div>
<div class=swatch style="background:rgb(71 71 71);">(71 71 71)</div>
<div class=swatch style="background:rgb(197 197 197);">(197 197 197)</div>
<div class=swatch style="background:rgb(119 119 119);">(119 119 119)</div>

</div>
<div>
<div class=swatch style="background:rgb(0 150 170);">(0 150 170)</div>
<div class=swatch style="background:rgb(73 134 183);">(73 134 183)</div>
<div class=swatch style="background:rgb(179 110 0);">(179 110 0)</div>
<div class=swatch style="background:rgb(196 97 21);">(196 97 21)</div>

</div>
<div>
<div class=swatch style="background:rgb(0 156 188);">(0 156 188)</div>
<div class=swatch style="background:rgb(0 133 237);">(0 133 237)</div>
<div class=swatch style="background:rgb(201 96 0);">(201 96 0)</div>
<div class=swatch style="background:rgb(215 78 0);">(215 78 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(159 100 185);">(159 100 185)</div>
<div class=swatch style="background:rgb(150 110 169);">(150 110 169)</div>
<div class=swatch style="background:rgb(158 101 183);">(158 101 183)</div>
<div class=swatch style="background:rgb(161 97 188);">(161 97 188)</div>

</div>
#+end_export

#+begin_src haskell :file other/combo.svg :results output graphics file :exports both
writeChartSvg "other/combo.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "dots" (dot' <$> cs) <> named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.01 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 20 0.8 0.3))))
#+end_src

#+RESULTS:
[[file:other/combo.svg]]

** gradient

#+begin_src haskell :file other/grad1.svg :results output graphics file :exports both
 writeChartSvg "other/grad1.svg" $ mempty & #svgOptions % #svgHeight .~ 50 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChart 0.1 100 (Colour 0.02 0.4 0.7 1) (Colour 1 1 1 1))
#+end_src

#+RESULTS:
[[file:other/grad1.svg]]

** default single


#+begin_src haskell
c = [2,219,240] :: Array '[3] Word8
lum0 = 0.5
sat0 = 0.15
hue0 = 0
cLum = greys c
cChroma = chroma lum0 c
cHue = hues lum0 sat0 c
cSat = sats lum0 hue0 c
#+end_src

fade to grey with constant luminance:

#+begin_src haskell :file other/single1.svg :results output graphics file :exports results
writeChartSvg "other/single1.svg" $ mempty & #svgOptions % #svgHeight .~ 30 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChart 0.1 10 (rgbw2colour c) (rgbw2colour cLum))
#+end_src

#+RESULTS:
[[file:other/single1.svg]]

Shift luminance with constant Chroma

#+begin_src haskell :file other/single2.svg :results output graphics file :exports results
writeChartSvg "other/single2.svg" $ mempty & #svgOptions % #svgHeight .~ 30 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChart 0.1 10 (rgbw2colour c) (rgbw2colour cChroma))
#+end_src

#+RESULTS:
[[file:other/single2.svg]]

luminance from 0 to 1

#+begin_src haskell :file other/single3.svg :results output graphics file :exports results
c = [2,219,240] :: Array '[3] Word8
lch = rgbw2oklch c
lum' = lch `index` [0]
lch0 = [0, lch `index` [1], lch `index` [2]]
lch1 = [1, lch `index` [1], lch `index` [2]]
grain = 100
d = 1 / fromIntegral grain
h = 0.1
writeChartSvg "other/single3.svg" $ mempty & #svgOptions % #svgHeight .~ 30 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChartOk h grain lch0 lch1) <> named "original" [chartOk (Rect (lum' - d/2) (lum' + d/2) (-0.15/2) (0.15/2)) lch]
#+end_src

#+RESULTS:
[[file:other/single3.svg]]

sat from 0 to ...

#+begin_src haskell :file other/singleSat.svg :results output graphics file :exports results
c = [2,219,240] :: Array '[3] Word8
lch = rgbw2oklch c
maxsat' = 0.2
sat' = lch `index` [1]
lch0 = [lch `index` [0], 0, lch `index` [2]]
lch1 = [lch `index` [0], maxsat', lch `index` [2]]
grain = 100
d = 1 / fromIntegral grain
h = 0.1
writeChartSvg "other/singleSat.svg" $ mempty & #svgOptions % #svgHeight .~ 100 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChartOk h grain lch0 lch1) <> named "original" [chartOk (Rect (sat' - 0.02) (sat' + 0.02) (-0.15/2) (0.15/2)) lch]
#+end_src

#+RESULTS:
[[file:other/singleSat.svg]]


hue rotation

#+begin_src haskell :file other/singleHue.svg :results output graphics file :exports results
c = [2,219,240] :: Array '[3] Word8
lch = rgbw2oklch c
hue' = lch `index` [2]
lch0 = [lch `index` [0], lch `index` [1], 0]
lch1 = [lch `index` [0], lch `index` [1], 360]
grain = 100
d = 1 / fromIntegral grain
h = 0.1
writeChartSvg "other/singleHue.svg" $ mempty & #svgOptions % #svgHeight .~ 100 & #hudOptions .~ (mempty & #chartAspect .~ ChartAspect) & #charts .~ named "gradient" (gradientChartOk h grain lch0 lch1)
#+end_src

#+RESULTS:
[[file:other/singleHue.svg]]


#+begin_src haskell :results output html :exports results
putStrLn $ unpack $ showSwatch c
putStrLn $ unpack $ showSwatch $ greys c
putStrLn $ unpack $ showSwatch $ chroma lum0 c
putStrLn $ unpack $ showSwatch $ hues lum0 sat0 c
putStrLn $ unpack $ showSwatch $ sats lum0 hue0 c
#+end_src

#+RESULTS:
#+begin_export html
<div class=swatch style="background:rgb(2 219 240);"></div>
<div class=swatch style="background:rgb(194 194 194);"></div>
<div class=swatch style="background:rgb(0 119 139);"></div>
<div class=swatch style="background:rgb(0 120 142);"></div>
<div class=swatch style="background:rgb(159 57 96);"></div>
#+end_export

** combo'

#+begin_src haskell
cs' =  [[180,4,243], [42,17,160], [231,224,0], [212,173,0]] :: [Array '[3] Word8]
lum = 0.7
sat0 = 0.2
hue0 = 0
#+end_src

#+begin_src haskell :results output html :exports results
putStrLn $ unpack $ showSwatches "" cs'
putStrLn $ unpack $ showSwatches "" $ greys <$> cs'
putStrLn $ unpack $ showSwatches "" $ chroma lum <$> cs'
putStrLn $ unpack $ showSwatches "" $ hues lum sat0 <$> cs'
putStrLn $ unpack $ showSwatches "" $ sats lum hue0 <$> cs'
#+end_src

#+RESULTS:
#+begin_export html
<div>
<div class=swatch style="background:rgb(180 4 243);">(180 4 243)</div>
<div class=swatch style="background:rgb(42 17 160);">(42 17 160)</div>
<div class=swatch style="background:rgb(231 224 0);">(231 224 0)</div>
<div class=swatch style="background:rgb(212 173 0);">(212 173 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(123 123 123);">(123 123 123)</div>
<div class=swatch style="background:rgb(58 58 58);">(58 58 58)</div>
<div class=swatch style="background:rgb(216 216 216);">(216 216 216)</div>
<div class=swatch style="background:rgb(177 177 176);">(177 177 176)</div>

</div>
<div>
<div class=swatch style="background:rgb(218 75 255);">(218 75 255)</div>
<div class=swatch style="background:rgb(127 141 255);">(127 141 255)</div>
<div class=swatch style="background:rgb(173 164 0);">(173 164 0)</div>
<div class=swatch style="background:rgb(193 154 0);">(193 154 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(200 114 246);">(200 114 246)</div>
<div class=swatch style="background:rgb(127 141 255);">(127 141 255)</div>
<div class=swatch style="background:rgb(174 164 0);">(174 164 0)</div>
<div class=swatch style="background:rgb(202 151 0);">(202 151 0)</div>

</div>
<div>
<div class=swatch style="background:rgb(255 0 151);">(255 0 151)</div>
<div class=swatch style="background:rgb(253 91 153);">(253 91 153)</div>
<div class=swatch style="background:rgb(248 98 154);">(248 98 154)</div>
<div class=swatch style="background:rgb(234 112 154);">(234 112 154)</div>

</div>
#+end_export

#+begin_src haskell :file other/combo.svg :results output graphics file :exports both
writeChartSvg "other/combo.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "dots" (dot' <$> cs') <> named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.01 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 20 0.8 0.3))))
#+end_src

#+RESULTS:
[[file:other/combo.svg]]

** color wheel

reference: https://observablehq.com/@fil/oklab-color-space

#+begin_src haskell :file other/wheel.svg :results output graphics file :exports both
lum = 0.5
writeChartSvg "other/wheel.svg" $ mempty & #hudOptions .~ defaultHudOptions & #charts .~ named "wheel" (((\(p,c) -> GlyphChart (defaultGlyphStyle & #size .~ 0.06 & #color .~ c & #borderSize .~ 0) [p]) <$> (filter (validColour . snd) (wheel 100 lum 0.4))))
#+end_src

#+RESULTS:
[[file:other/wheel.svg]]

** oklab


[[file:///Users/tonyday/haskell/color-adjust/other/gradient.html][gradient]]

[[https://bottosson.github.io/posts/oklab/][A perceptual color space for image processing]]

oklab

| Channel | Range            | Description           |
|---------+------------------+-----------------------|
| l       | [0, 0.999]≈      | Lightness             |
| a       | [-0.233, 0.276]≈ | Green–red component   |
| b       | [-0.311, 0.198]≈ | Blue–yellow component |

oklch

| Channel | Range       | Description |
|---------+-------------+-------------|
| l       | [0, 0.999]≈ | Lightness   |
| c       | [0, 0.322]≈ | Chroma      |
| h       | [0, 360)    | Hue         |

** Haskell
*** setup

#+begin_src haskell :results value
:set prompt "> "
:set -Wno-type-defaults
:set -Wno-name-shadowing
:set -XOverloadedStrings
:set -XOverloadedLists
:set -XOverloadedLabels
:set -XFlexibleContexts
:set -XGADTs
:set -XDataKinds
:load src/Data/Colour/Adjust.hs
#+end_src

#+begin_src haskell
import qualified Graphics.Color.Space as S
import Data.Text (Text)
import Chart
import Data.Colour.Adjust
import Optics.Core
import Graphics.Color.Model as M hiding (one)
#+end_src

#+RESULTS:

check

#+BEGIN_SRC haskell :results value :export both
let x = "ok"
putStrLn x
#+END_SRC

#+RESULTS:
: ok

*** color conversion

#+begin_src haskell
xyz1 = hex2xyz "#02DBF0"
S.fromColorXYZ xyz1 :: Color (S.SRGB 'S.NonLinear) Double
#+end_src

#+RESULTS:
: <SRGB 'NonLinear:( 0.0081038092138417, 0.8588351697607257, 0.9411819663894760)>




#+begin_src haskell :results output :exports both
rgbi2luv 200 200 200
rgbi2luv 0 0 200
#+end_src

#+RESULTS:
: <LUV * D65:(90.8369134605712200, 0.0124031462541918, 0.0037174451044090)>
: <LUV * D65:(28.4870626869885650,-8.2859360809530140,-114.9546652999056100)>

#+begin_src haskell
convert (S.mkColorRGB $ unsafeFromHex "#121212" :: Color (S.SRGB 'S.Linear) Double) :: Color (LUV.LUV S.D65) Double
#+end_src

#+RESULTS:
: <LUV * D65:(31.9404490247319760, 0.0043612452866247, 0.0013071433334330)>


#+begin_src haskell
luv2rgb 85 (-14) (-30)
#+end_src

#+RESULTS:
: <RGB:( 0.5164515574172603, 0.6749080154141279, 0.9363589261483973)>

#+begin_src haskell
rgbi2rgb 18 18 18
#+end_src

#+RESULTS:
: <RGB:( 0.0703125000000000, 0.0703125000000000, 0.0703125000000000)>


#+begin_src haskell :results output :exports both
rgbi2luv 0 0 255
#+end_src

#+RESULTS:
: <LUV * D65:(32.2396106027892400,-9.3774270680262570,-130.0974300848391500)>

#+begin_src haskell :results output :exports both
luv2rgb 32.2 (-9.38) (-130.10)
#+end_src

#+RESULTS:
: <RGB:(-0.0002633671741094,-0.0002687954995931, 0.9970731235971670)>

#+begin_src haskell :results output html :exports both
sequence_ $ (putStrLn . unpack) <$> [luv2span 32 0 0, luv2span 32 (-9) (-130), luv2span 32 (-4.5) (-65), luv2span 32 (-4.5) (-22), luv2span 32 (-2) (-12), luv2span 95 (-4) (-12)]
#+end_src

#+RESULTS:
#+begin_export html
<span style="color:rgb(18,18,18);">⬤</span>
<span style="color:rgb(0,-1,255);">⬤</span>
<span style="color:rgb(13,13,77);">⬤</span>
<span style="color:rgb(14,17,33);">⬤</span>
<span style="color:rgb(16,17,25);">⬤</span>
<span style="color:rgb(212,224,256);">⬤</span>
#+end_export

<span style="color:#121212;">⬤</span>

*** random colors

#+begin_src haskell :file other/cs.svg :results output graphics file :exports both
cs = mempty & set #hudOptions (defaultHudOptions & set #chartAspect (FixedAspect 1)) & set #charts (named "randos" (zipWith (\c x -> GlyphChart (defaultGlyphStyle & set #shape CircleGlyph & set #color c & set #borderSize 0 & set #size 0.25) [x]) (take 10000 $ (\(ColorRGB r g b) -> Colour r g b 1) <$> rRGBs) (grid InnerPos (Rect 0 1 0 1) (Point 4 4))))
writeChartSvg "other/cs.svg" cs
#+end_src

#+RESULTS:
[[file:other/cs.svg]]

** reference

CSS colors are defined as [[https://en.wikipedia.org/wiki/SRGB][sRGB - Wikipedia]], with D65 illuminate

- [[https://en.wikipedia.org/wiki/Relative_luminance][Relative luminance - Wikipedia]]
- [[https://en.wikipedia.org/wiki/Chromaticity][Chromaticity - Wikipedia]]
- [[https://en.wikipedia.org/wiki/CIE_1931_color_space][CIE 1931 color space - Wikipedia]]
- [[https://en.wikipedia.org/wiki/CIELAB_color_space][CIELAB color space - Wikipedia]]
- [[https://www.w3.org/TR/css-color-5/#colorcontrast][CSS Color Module Level 5]]
- [[https://www.w3.org/TR/css-color-4/#rgb-functions][CSS Color Module Level 4]]

** style

<style>
.swatch {
  border-radius:20%;
  display: inline-block;
  margin:10px;
  width: 20px;
  height: 20px;
  overflow: hidden;
  font-size: 0px;
}
.swatch:hover {
  margin: 0;
  width: 40px;
  height: 40px;
  line-height: 40px;
  font-size: 6px;
  color: rgb(12 12 12);
  text-align: center;
  overflow: hidden;
}
</style>

